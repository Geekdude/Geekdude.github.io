<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://geekdude.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://geekdude.github.io/" rel="alternate" type="text/html" /><updated>2022-03-07T20:47:24-05:00</updated><id>https://geekdude.github.io/feed.xml</id><title type="html">Aaron Young</title><subtitle>Personal website for Aaron Young.</subtitle><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><entry><title type="html">Changing from Disqus to Utterances</title><link href="https://geekdude.github.io/tech/changing-to-utterances/" rel="alternate" type="text/html" title="Changing from Disqus to Utterances" /><published>2021-10-31T00:00:00-04:00</published><updated>2021-10-31T00:00:00-04:00</updated><id>https://geekdude.github.io/tech/changing-to-utterances</id><content type="html" xml:base="https://geekdude.github.io/tech/changing-to-utterances/">&lt;p&gt;I have been having an issue where &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; would not send me any emails when new comments are posted to the website.
After going through all the settings in Disqus, changing my email address, and testing adding comments using a guest login, I could not figure out how to get email notifications to work.
Because of this, I changed to using &lt;a href=&quot;https://utteranc.es/&quot;&gt;Utterances&lt;/a&gt; for my website’s comments.
Utterances’ is a great choice since it is open-source and uses the issues tracker of the GitHub repository to store the comments.
Each page is its own issue, and the comments are added to the issue.
Now email notification works just like GitHub’s issue email notification system.
The main downside to Utterances is that you have to log in to a GitHub account in order to post a comment.
I liked the flexibility that Disqus provided in terms of login types and guest posting, but I need a commenting system that notifies me when new comments are added, and I like that comments are stored as issues in the issue tracker.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Website" /><summary type="html">I have been having an issue where Disqus would not send me any emails when new comments are posted to the website. After going through all the settings in Disqus, changing my email address, and testing adding comments using a guest login, I could not figure out how to get email notifications to work. Because of this, I changed to using Utterances for my website’s comments. Utterances’ is a great choice since it is open-source and uses the issues tracker of the GitHub repository to store the comments. Each page is its own issue, and the comments are added to the issue. Now email notification works just like GitHub’s issue email notification system. The main downside to Utterances is that you have to log in to a GitHub account in order to post a comment. I liked the flexibility that Disqus provided in terms of login types and guest posting, but I need a commenting system that notifies me when new comments are added, and I like that comments are stored as issues in the issue tracker.</summary></entry><entry><title type="html">Dr. Dean to Serve on National Artificial Intelligence Research Resource Task Force</title><link href="https://geekdude.github.io/tech/dean-nairr/" rel="alternate" type="text/html" title="Dr. Dean to Serve on National Artificial Intelligence Research Resource Task Force" /><published>2021-07-11T00:00:00-04:00</published><updated>2021-07-11T00:00:00-04:00</updated><id>https://geekdude.github.io/tech/dean-nairr</id><content type="html" xml:base="https://geekdude.github.io/tech/dean-nairr/">&lt;p&gt;My PhD advisor, Mark Dean, was recentally selected to server on the National Artificial Intelligence Research Resource (NAIRR) Task Force. 
Read more about it at &lt;a href=&quot;https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/&quot;&gt;https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="News" /><summary type="html">My PhD advisor, Mark Dean, was recentally selected to server on the National Artificial Intelligence Research Resource (NAIRR) Task Force. Read more about it at https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/.</summary></entry><entry><title type="html">Brother’s Acting Demo Reel</title><link href="https://geekdude.github.io/life/prestons-demo-reel/" rel="alternate" type="text/html" title="Brother’s Acting Demo Reel" /><published>2021-06-08T00:00:00-04:00</published><updated>2021-06-08T00:00:00-04:00</updated><id>https://geekdude.github.io/life/prestons-demo-reel</id><content type="html" xml:base="https://geekdude.github.io/life/prestons-demo-reel/">&lt;p&gt;I helped my brother Preston edit together an acting demo reel using DaVinci Resolve. Check it out on his website at &lt;a href=&quot;https://volweb.utk.edu/~pyoung15/acting/&quot;&gt;https://volweb.utk.edu/~pyoung15/acting/&lt;/a&gt; or watch it below on Youtube.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/H43XMSqUuj8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Life" /><category term="DaVinci Resolve" /><summary type="html">I helped my brother Preston edit together an acting demo reel using DaVinci Resolve. Check it out on his website at https://volweb.utk.edu/~pyoung15/acting/ or watch it below on Youtube.</summary></entry><entry><title type="html">Happy Mother’s Day</title><link href="https://geekdude.github.io/life/happy-mothers-day/" rel="alternate" type="text/html" title="Happy Mother’s Day" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://geekdude.github.io/life/happy-mothers-day</id><content type="html" xml:base="https://geekdude.github.io/life/happy-mothers-day/">&lt;p&gt;Happy Mother’s Day! Below is a blender animation I made a few years ago after following the &lt;a href=&quot;https://www.youtube.com/watch?v=TPrnSACiTJ4&amp;amp;list=PLexwJr_iILK7IkuhEeAYeN7aLV5AAXKa-&quot;&gt;Blender Guru’s Donut Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/FBvJ1h-pKv8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Life" /><category term="Blender" /><summary type="html">Happy Mother’s Day! Below is a blender animation I made a few years ago after following the Blender Guru’s Donut Tutorial.</summary></entry><entry><title type="html">ASCR Workshop on Reimagining Codesign Whitepaper</title><link href="https://geekdude.github.io/research/ascr-reimagining-codesign/" rel="alternate" type="text/html" title="ASCR Workshop on Reimagining Codesign Whitepaper" /><published>2021-03-10T00:00:00-05:00</published><updated>2021-03-10T00:00:00-05:00</updated><id>https://geekdude.github.io/research/ascr-reimagining-codesign</id><content type="html" xml:base="https://geekdude.github.io/research/ascr-reimagining-codesign/">&lt;p&gt;My whitepaper titled &lt;a href=&quot;https://custom.cvent.com/DCBD4ADAAD004096B1E4AD96F3C8049E/files/event/f64a4f28b4734808924cc8c3d9a2af63/32fd0b3c80c04326a2adf6827290512f.pdf&quot;&gt;Emerging Heterogeneous Systems Provide Great Opportunities for Codesign&lt;/a&gt; for the &lt;a href=&quot;https://web.cvent.com/event/f64a4f28-b473-4808-924c-c8c3d9a2af63/summary&quot;&gt;ASCR Workshop on Reimagining Codesign&lt;/a&gt; was accepted.&lt;/p&gt;

&lt;p&gt;All the accepted whitepapers can be found &lt;a href=&quot;https://web.cvent.com/event/f64a4f28-b473-4808-924c-c8c3d9a2af63/websitePage:38a39b7a-d1af-4643-82ac-8fcf1069773b&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Research" /><category term="Heterogeneous Systems" /><summary type="html">My whitepaper titled Emerging Heterogeneous Systems Provide Great Opportunities for Codesign for the ASCR Workshop on Reimagining Codesign was accepted.</summary></entry><entry><title type="html">Getting started with Ctags with Vim and Git.</title><link href="https://geekdude.github.io/tech/ctags/" rel="alternate" type="text/html" title="Getting started with Ctags with Vim and Git." /><published>2021-03-05T00:00:00-05:00</published><updated>2021-03-05T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/ctags</id><content type="html" xml:base="https://geekdude.github.io/tech/ctags/">&lt;p&gt;&lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;Ctags&lt;/a&gt; with Vim are incredibly useful for quickly navigating around code.
With them, Vim can jump between symbols to quickly go to the definition of symbols or find keywords within the document.
Ctags + Vim end up working very similar to how &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; or other IDEs “go to definition” and “find all symbols works.”&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;http://ctags.sourceforge.net/whatis.html&quot;&gt;ctags website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility. A tag signifies a language object for which an index entry is available (or, alternatively, the index entry created for that object).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ctags-with-vim&quot;&gt;Ctags with Vim&lt;/h2&gt;

&lt;p&gt;Ctags can be annoying to use because you have to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctags&lt;/code&gt; program to generate a tag file, which then needs to be found by Vim to be used.
If the code changes, then the tag file will need to be re-updated.
One way to set up ctags is to map a Vim keypress to generate the ctags.
In my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimrc&lt;/code&gt;, I set it up to regenerate ctags when I press &amp;lt;F5&amp;gt; while not in a &lt;img src=&quot;http://latex.codecogs.com/gif.latex?\LaTeX&quot; border=&quot;0&quot; /&gt; file.
More on the ctags command later.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Set f5 to generate tags for non-latex files&lt;/span&gt;
augroup TexTags
autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TexTags
autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; tex &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b:latex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
augroup end
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b:latex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;f5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;ctags &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to generating the ctags, you also need to tell Vim where to find the generated tag files.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Ctags search&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=.&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;;$HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tags string says to search for the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tags&lt;/code&gt; in the current file’s directory and recursively search upward until the user’s home directory is reached.&lt;/p&gt;

&lt;h2 id=&quot;ctags-with-vim-and-git&quot;&gt;Ctags with Vim and Git&lt;/h2&gt;

&lt;p&gt;However, I do not manually generate the ctags file with &amp;lt;F5&amp;gt;.
I store all my source code in &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;, so instead of manually generating the ctags file, I use &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;githooks&lt;/a&gt; to automatically generate the ctags files whenever I checkout, commit, merge, or rewrite.
To setup githooks to be added automatically to newly cloned or created git repos, you make a git template with the correct files.
The git template will be copied into the new repositories &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder on creation.&lt;/p&gt;

&lt;p&gt;First, setup the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_template&lt;/code&gt; structure.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.git_template/
└── hooks
    ├── ctags
    ├── post-checkout
    ├── post-commit
    ├── post-merge
    └── post-rewrite

1 directory, 5 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ctags:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--show-toplevel&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rm -f &quot;$dir/.$$.tags&quot;'&lt;/span&gt; EXIT
ctags &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tag-relative&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--extra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+f &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tags&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--languages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-javascript&lt;/span&gt;,sql
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tags&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.tags&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-checkout:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-commit:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-merge:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-rewrite:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;rebase&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/post-merge &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also have to add the template to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[init]
    templatedir = ~/.git_template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now more about the ctags command.
To use the command, you first have to install ctags.
I use &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;exuberant-ctags&lt;/a&gt; which can be installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install exuberant-ctags&lt;/code&gt; on Ubuntu or Debian based Linux.
The ctags command I use is&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctags -R --tag-relative --extra=+f -f&quot;$dir/.$$.tags&quot; --languages=-javascript,sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt; recurses into directories.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tag-relative&lt;/code&gt; sets file paths relative to the tag file.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--extra=+f&lt;/code&gt; includes the entry for the base file name of every source file.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; specifies that the tag file should be saved at the root of the git repository as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tags&lt;/code&gt;.
Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--languages&lt;/code&gt; removes javascript and SQL from the languages which get tagged.&lt;/p&gt;

&lt;p&gt;As mentioned before, this template will only apply to new git repositories; therefore, I also created two &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish&lt;/a&gt; functions to reload git hooks based on the git template.
One file reloads hooks in a git repo without submodules, and the other one recursively updates the hooks of all submodules.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-reload-hooks.fish&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function git-reload-hooks --description 'Reload git hooks'
rm -f (git rev-parse --git-dir)/hooks/*
git init
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-reload-hooks-all.fish&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function git-reload-hooks-all --description 'Reload all git hooks'
    git submodule foreach --recursive 'rm -f $(git rev-parse --git-dir)/hooks/*;git init'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all of this seems like a lot to setup, I recommend storing all your linux dotfiles in a git repository with a script to symlink the files to the right location.
I plan to create a future post with more detail on how this is done.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;I followed &lt;a href=&quot;https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&quot;&gt;https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&lt;/a&gt; when I was setting up ctags for the first time.
I have since modified my setup to work better with git submodules and other edge cases.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Git" /><category term="Vim" /><category term="Ctags" /><summary type="html">Ctags with Vim are incredibly useful for quickly navigating around code. With them, Vim can jump between symbols to quickly go to the definition of symbols or find keywords within the document. Ctags + Vim end up working very similar to how Visual Studio Code or other IDEs “go to definition” and “find all symbols works.”</summary></entry><entry><title type="html">Dr. Dean featured in PC Gamer</title><link href="https://geekdude.github.io/tech/dean-pc-gamer/" rel="alternate" type="text/html" title="Dr. Dean featured in PC Gamer" /><published>2021-02-26T00:00:00-05:00</published><updated>2021-02-26T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/dean-pc-gamer</id><content type="html" xml:base="https://geekdude.github.io/tech/dean-pc-gamer/">&lt;p&gt;My PhD advisor, Mark Dean, was recentally featured in PC Gamer for his work on the first IBM PC. Read the article at &lt;a href=&quot;https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/&quot;&gt;https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="News" /><summary type="html">My PhD advisor, Mark Dean, was recentally featured in PC Gamer for his work on the first IBM PC. Read the article at https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/.</summary></entry><entry><title type="html">Moving Website from web.eecs.utk.edu to Github.io</title><link href="https://geekdude.github.io/tech/moving-website/" rel="alternate" type="text/html" title="Moving Website from web.eecs.utk.edu to Github.io" /><published>2021-02-24T00:00:00-05:00</published><updated>2021-02-24T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/moving-website</id><content type="html" xml:base="https://geekdude.github.io/tech/moving-website/">&lt;p&gt;After graduating last May, I decided to migrate &lt;a href=&quot;/tech/new-website/&quot;&gt;my website&lt;/a&gt; from hosting on the EECS servers at UTK to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
I always planned on migrating to GitHub pages post-graduation; that was one reason I chose to build my website using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.
GitHub pages can host any static website, but it is designed to build and work with Jekyll sites automatically.
I wanted to migrate my website properly with correct redirection and Search Engine Optimization (SEO).
Overall the process was relatively easy, but I did run into some issues, primarily with the customizations I have done to the website.
This post will cover the overall steps I took and also the issues and workarounds I encountered.&lt;/p&gt;

&lt;h2 id=&quot;moving-the-site-to-github&quot;&gt;Moving the site to GitHub&lt;/h2&gt;
&lt;p&gt;Previously I have been hosting my repository as a private repo in &lt;a href=&quot;https://bitbucket.org/&quot;&gt;bitbucket&lt;/a&gt;.
I decided to move the repository to a public &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; repo since I used GitHub pages for hosting.
At first, I tried just to move my repository over directly and use GitHub’s built-in building of Jekyll.
However, this auto-building feature only supports a &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll#plugins&quot;&gt;subset of Jekyll plugins&lt;/a&gt;.
The plugin I use for pagination, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;Jekyll Paginate V2&lt;/a&gt;, is not one of the supported plugins.
This limitation means that the built-in building would not work for my site without changing the plugins I use.
Therefore, I turned off the automatic Jekyll building by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file to the root of the repository.&lt;/p&gt;

&lt;p&gt;I then tried to build the site automatically with GitHub Actions, but I had trouble getting the site to build using a docker image with the Jekyll build action.
While looking into the build issues, I realized my website would not build with the newest versions of Jekyll and &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;.
By finding a copy of the Gemfile.lock file I used to build the website with last, I was able to roll back to the old versions and build my website correctly again.
Again, the issue was related to the custom template files I created to use Paginate V2 for my home pages and article pages.
The trouble with Jekyll and extension versions leads me to an important lessons learned:
&lt;strong&gt;Store the Gemfile.lock in version control so that you can diagnose issues caused by building with newer versions of the tools and extensions.&lt;/strong&gt;
I was lucky and could just pull the lock file from my backups which saved me extra debugging time.&lt;/p&gt;

&lt;p&gt;Since I like the way my website looks and I didn’t want to spend extra time porting my template to the newer version, I decided to keep building the website locally and uploading the static site for hosting.
Luckily GitHub Pages supports this flow.
The static website can be uploaded to the main branch or a branch called gh-pages.
Actually, the branch and path can be chosen under Settings -&amp;gt; Options -&amp;gt; GitHub Pages, so any location can be used for the source.
At first, I tested uploading the built website to the main branch, and the website was hosted as expected.
But I then decided to host the website’s source in the main branch and a gh-pages branch to host the built website.
To make the whole process simpler, I wanted to update my deploy script to build and deploy the website to a branch in the repository.
At first, I was hesitant to store the built files in the repo, but since the files are in an orphaned branch, they are separate from the main branch.
The orphan branch (as opposed to a folder in the main branch) will make cleaning the files up easier, if they get too large.&lt;/p&gt;

&lt;p&gt;Luckily updating the build script was easy since I found a &lt;a href=&quot;https://github.com/X1011/git-directory-deploy&quot;&gt;Git Directory Deploy&lt;/a&gt; script that I could leverage to copy the built site directory to a separate orphaned git branch.
Now &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/deploy.sh&quot;&gt;my deploy script&lt;/a&gt; just calls a &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/deploy_github.sh&quot;&gt;customized version of the git deploy script&lt;/a&gt; with the variables filled in for my site.
Previously it would use rsync to copy the build files to the EECS servers website folder.&lt;/p&gt;

&lt;p&gt;Since I decided to use the same local build then deploy setup, minimal changes were needed to the site itself.
I updated the site URL in &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/_config.yml&quot;&gt;_config.yml&lt;/a&gt; as well as updated the previously mentioned deploy scripts.
That was all that was required to migrate the site and start hosting on GitHub Pages. The source code for the site can be found at &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io&quot;&gt;https://github.com/Geekdude/Geekdude.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-redirection&quot;&gt;Setting up redirection&lt;/h2&gt;
&lt;p&gt;The next step was to set up redirection from the old URL to the new URL.
After looking into redirection, I discovered that I wanted to use redirection with the permanent redirection status (301) which indicates that the resource has moved permanently.
From various posts, I learned that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file is used on linux servers to specify server-level redirects.
I had trouble finding the correct redirect commands until I read the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_alias.html#redirect&quot;&gt;Apache Documentation for Redirect&lt;/a&gt; and &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_alias.html#redirectmatch&quot;&gt;RedirectMatch&lt;/a&gt;.
The trouble I ran into was how to correctly map from a folder on a domain to a domain (i.e. /~ayoung48 to /).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file that ended up working properly is&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RedirectMatch 301 &quot;/~ayoung48/(.*)&quot; &quot;https://Geekdude.github.io/$1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This redirect match command would correctly redirect pages from the old site to the new site.
I will leave up this redirection until I lose access to the UTK servers.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-optimization&quot;&gt;Search Engine Optimization&lt;/h2&gt;
&lt;p&gt;Since the redirection was setup in the previous section, updating the search optimization is easier.
I added the new site to &lt;a href=&quot;https://search.google.com/search-console/about&quot;&gt;Google Search Console&lt;/a&gt; and &lt;a href=&quot;https://www.bing.com/webmasters&quot;&gt;Microsoft Webmaster Tools&lt;/a&gt;.
There did not seem to be an explicit place to let them know about the move&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but with redirection and having both sites listed under my account, I hope their web crawler will figure it out.
I do not even need to redo the website verification method since it was already done for the old address and the verification files are still in place.&lt;/p&gt;

&lt;h2 id=&quot;moving-comments&quot;&gt;Moving Comments&lt;/h2&gt;
&lt;p&gt;Moving comments with Discus was easy as well.
Since I have 301 redirection set up, I could just go into Admin -&amp;gt; Moderate Comments -&amp;gt; Tools -&amp;gt; Migration Tools and use the Redirect Crawler.
Then Discus ported the two comments I had on my old site to the new site.
I also discovered that I am not getting email notifications when people comment.
I will need to look into why.
The settings are correctly set.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There was one for google but it required Domain level property types, not URL Prefix like I am using. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Website" /><summary type="html">After graduating last May, I decided to migrate my website from hosting on the EECS servers at UTK to GitHub Pages. I always planned on migrating to GitHub pages post-graduation; that was one reason I chose to build my website using Jekyll. GitHub pages can host any static website, but it is designed to build and work with Jekyll sites automatically. I wanted to migrate my website properly with correct redirection and Search Engine Optimization (SEO). Overall the process was relatively easy, but I did run into some issues, primarily with the customizations I have done to the website. This post will cover the overall steps I took and also the issues and workarounds I encountered.</summary></entry><entry><title type="html">PhD Dissertation and Artifacts Available</title><link href="https://geekdude.github.io/research/dissertation/" rel="alternate" type="text/html" title="PhD Dissertation and Artifacts Available" /><published>2021-01-30T00:00:00-05:00</published><updated>2021-01-30T00:00:00-05:00</updated><id>https://geekdude.github.io/research/dissertation</id><content type="html" xml:base="https://geekdude.github.io/research/dissertation/">&lt;p&gt;My dissertation titled &lt;em&gt;SNACC: The Scaled-up Neuromorphic Array Communications Controller&lt;/em&gt; is now available at &lt;a href=&quot;https://trace.tennessee.edu/utk_graddiss/5843/&quot;&gt;https://trace.tennessee.edu/utk_graddiss/5843/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have also made available two general-purpose IP blocks written in VHDL that I created as part of my dissertation work. They are a custom Aurora acknowledgment automatic repeat request design available at &lt;a href=&quot;https://github.com/Geekdude/aurora-ack&quot;&gt;https://github.com/Geekdude/aurora-ack&lt;/a&gt; and a AXI4-Stream clock converter design available at &lt;a href=&quot;https://github.com/Geekdude/axi4-stream-clock-converter&quot;&gt;https://github.com/Geekdude/axi4-stream-clock-converter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recommended-citation&quot;&gt;Recommended Citation&lt;/h2&gt;

&lt;p&gt;Plain Text:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Young, Aaron Reed, &quot;SNACC: The Scaled-up Neuromorphic Array Communications Controller. &quot; PhD diss., University of Tennessee, 2020.
https://trace.tennessee.edu/utk_graddiss/5843
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bibtex:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@PhdThesis{y:20:snacc,
    title       = {SNACC: The Scaled-up Neuromorphic Array Communications Controller},
    author      = {Aaron Reed Young},
    institution = {University of Tennessee},
    month       = {May},
    year        = {2020},
    url         = {https://trace.tennessee.edu/utk_graddiss/5843/}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Research" /><category term="Neuromorphic Computing" /><summary type="html">My dissertation titled SNACC: The Scaled-up Neuromorphic Array Communications Controller is now available at https://trace.tennessee.edu/utk_graddiss/5843/.</summary></entry><entry><title type="html">Sourdough Bread</title><link href="https://geekdude.github.io/life/sourdough-bread/" rel="alternate" type="text/html" title="Sourdough Bread" /><published>2020-04-12T00:00:00-04:00</published><updated>2020-04-12T00:00:00-04:00</updated><id>https://geekdude.github.io/life/sourdough-bread</id><content type="html" xml:base="https://geekdude.github.io/life/sourdough-bread/">&lt;p&gt;My favorite type of bread is a fresh, warm loaf of sourdough.
I can almost go through a whole loaf by myself when it is fresh from the oven.
Sourdough bread also makes the best french toast and great bread crumbs for wiener schnitzel.
This post will go over the basics to getting started making sourdough bread.
It includes links to the resources I used to get started, my favorite recipes, and some tips and tricks I have learned over my years of baking and experimenting for fun.&lt;/p&gt;

&lt;h2 id=&quot;starter&quot;&gt;Starter&lt;/h2&gt;
&lt;p&gt;At first I tried to make my own starter.
This didn’t really work out all that well.
I learned that you should not try to make a sourdough starter by initially adding in baking yeast.
If you do this, you will not get the good sourdough flavor and it will be harder to form the symbiotic relationship between bacteria and wild yeast which gives sourdough its unique acidic flavor.
After a first bland attempt and subsequent difficulty to get a starter to grow with wild yeast (i.e.
with only flour and water).
I decided to buy &lt;a href=&quot;https://shop.kingarthurflour.com/items/classic-fresh-sourdough-starter-1-oz&quot;&gt;starter from King Arthur Flour&lt;/a&gt;.
This starter worked much better.
I bought it in 2013 and I have kept it going ever since.
I keep the sourdough starter in a &lt;a href=&quot;https://shop.kingarthurflour.com/items/classic-king-arthur-sourdough-crock&quot;&gt;King Arthur Sourdough Crock&lt;/a&gt;.
They also sale the &lt;a href=&quot;https://shop.kingarthurflour.com/items/sourdough-starter-and-crock-set&quot;&gt;starter in a set with the crock&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;starter-care&quot;&gt;Starter Care&lt;/h3&gt;
&lt;p&gt;King Arthur Flour provides a great &lt;a href=&quot;https://www.kingarthurflour.com/learn/guides/sourdough&quot;&gt;sourdough guide&lt;/a&gt; to learn how to get started with sourdough bread.
It includes information on how to maintain a starter as well as how to bake bread.
This is where I first started and I still use much of what I learned here.&lt;/p&gt;

&lt;p&gt;I generally end up neglecting my starter for a few months at a time when I get busy and didn’t have time to bake.
The starter will do well for this long in the fridge.
Do not freeze the starter since doing so could harm the microbes.
If I’m not planing on using my starer within the next few days, I will keep it in the fridge.
The cold slows down the activity of the organisms which also slows down the rate they consume the flour.
After a while, brown liquid will form on the top of the starter.
This is expected and can be mixed back into the starter before feeding.
If the starter ever shows signs of mold, has an orange or pink tint/streak or smells putrid then it went bad with harmful microorganism and you will want to throw it out.
I don’t know how common this is as mine has never spoiled.
The smell of sourdough is quite sharp but it should smell like beer or bread and not like spoiled food.&lt;/p&gt;

&lt;p&gt;When I feed my starter I mix together a cup of starter, a cup of water, and a cup of flour.
I usually use a scale which means I mix together 172 grams of starter, water, and flour.
You can vary the ratios, but I found that the same amount of each works well.
I aim for a pancake batter like consistency.
Too much water and there isn’t as much food.
Too much flour and the starter can expand outside the container and makes a mess.
A nice balance will bubble, but not trap the air so that it expands.&lt;/p&gt;

&lt;p&gt;There is a difference between a fed and unfed starter.
A fed starer is active and bubbling.
Typically, you can feed the starter and wait a few hours and it will be active.
An unfed starter is straight from the fridge before feeding.
If it has been a long time since I fed the starter, I will feed it, let it sit at room temperature for a day, feed it again, and wait for it to appear active before I consider it fed.
I have made bread with both fed and unfed starter.
The fed starter makes it easier to get fluffier bread but unfed still works.&lt;/p&gt;

&lt;p&gt;Another great trick I learned is that you can easily transfer starter by taking some of it and adding lots of flour so that it forms a dry ball.
The dry ball can then be stored in the top of a bag of flour you are taking on a trip.
I have used this to transfer my starter when I traveled to visit relatives and I wanted to make sourdough bread for them.
The bag of flour with dried starter in the top was much easier to transfer then the ceramic crock.&lt;/p&gt;

&lt;h2 id=&quot;sourdough-bread&quot;&gt;Sourdough Bread&lt;/h2&gt;
&lt;p&gt;Bread making is as much an art as a science.
There are many factors at work to determine how the final loaf will turn out.
These variables include the activity of the starter, the water-to-flour ratio, and the time and temperatures for the various fermenting, proofing, and rising stages.
Although I started out following the &lt;a href=&quot;https://www.kingarthurflour.com/recipes/extra-tangy-sourdough-bread-recipe&quot;&gt;Extra-Tangy Sourdough Bread recipe&lt;/a&gt;, I also started experimenting with this recipe to learn how different ingredients and techniques affected the final loaf.
Now I still loosely follow the recipe, but I do it more from experience and practice then from precisely measuring everything.
My goal was actually to simplify the process as much as possible, down to the key ingredients, understand the role these ingredients play and then understand the phases of the proofing process.
I found that the bread mostly came out well every time and the variation was fun.
My current bread relies on simple ingredients and gets the great sourdough flavor from only the starter and the proofing steps.&lt;/p&gt;

&lt;p&gt;My approach to making bread has been shaped by reading a variety of books, reading internet posts, and from watching YouTube videos.
Of particular note is &lt;a href=&quot;https://smile.amazon.com/dp/0825463149/ref=cm_sw_em_r_mt_dp_U_gAoKEbRRY3PKE&quot;&gt;In Celebration of Simplicity: The Joy of Living Lightly&lt;/a&gt; which is about living a life based on gospel simplicity through an extended metaphor with the simple ingredients in bread.
This book inspired me to keep the ingredients simple and to understand the role of each.
The bread chapter in &lt;a href=&quot;https://smile.amazon.com/dp/0143125338/ref=cm_sw_em_r_mt_dp_U_ZHoKEb3MET40D&quot;&gt;Cooked: A Natural History of Transformation&lt;/a&gt; was very interesting and led me to experimenting with whole wheat sourdough bread and also to use wetter dough.
The whole wheat was very challenging, but I could eventually make a good sandwich bread loaf.
However, I could never get as yummy of an artesian loaf as I could with white flour.
The introduction to &lt;a href=&quot;https://smile.amazon.com/Classic-Sourdoughs-Revised-Bakers-Handbook-ebook/dp/B004EWFUQ4/ref=sr_1_36?dchild=1&amp;amp;keywords=sourdough+bread&amp;amp;qid=1586731950&amp;amp;sr=8-36&quot;&gt;Classic Sourdoughs&lt;/a&gt; has a great, concise, introduction to the art of sourdough bread making with information on the various factors and how they affect the final loaf.&lt;/p&gt;

&lt;h3 id=&quot;my-method-of-baking-bread&quot;&gt;My Method of Baking Bread&lt;/h3&gt;
&lt;p&gt;So I will now walk you through my process making bread, but for a recipe and more details instructions follow the &lt;a href=&quot;https://www.kingarthurflour.com/recipes/extra-tangy-sourdough-bread-recipe&quot;&gt;Extra-Tangy Sourdough Bread recipe&lt;/a&gt; and start experimenting.
I start off the day before by mixing together a small mason jar of water (2-ish cups), the leftover starter after feeding it, and a sifter full of flour (3-ish cups) in a large glass mixing bowl.
I spend a while mixing this together until it is quite smooth 1-3 minutes.
At this stage it should be uniform and still liquidy like pancake batter.
You want it to be liquidy so that it won’t overflow the bowl overnight.
Then let the bowl sit out on the counter until you go to bed, then move it into the fridge (I will leave it out all night if I used an unfed starter).&lt;/p&gt;

&lt;p&gt;The next day I just add some salt, honey, and herbs.
With these ingreadients, I stopped measuring the amounts percisely.
Start with the amounts listed in the recipe, but after awhile you get a feel for the rough amounts and no longer have to measure precisely.
I like using thyme or a mix of Italian herbs.
For this part I take inspiration from Penelope Wilcock who says in &lt;a href=&quot;https://smile.amazon.com/dp/0825463149/ref=cm_sw_em_r_mt_dp_U_gAoKEbRRY3PKE&quot;&gt;In Celebration of Simplicity: The Joy of Living Lightly&lt;/a&gt; “When I add salt, yeast, honey and herbs into my bread, I just put in ‘some’. Approximate amounts will do, creating acceptable variants in the taste.”
I no longer add sour salt to my bread, since I am able to get a strong natural sourdough flavor without it.
At this point I also usually add in some olive oil.
If you want artesian bread, then leave the olive oil out.
But if you want sandwich bread with a softer crust include it.
The oil will reduce the size of the air pockets and make the crust softer and better for sandwich bread.
Again with the oil, I don’t measure precisely but pour in ‘some’ from my tin olive oil container.
I probably add around a tablespoon or two.
On the amount of oil to add, Penelope says “I put lots in.”
I mix everything together, so that it is uniformly combined.
Then I either dump it out onto a bed of flour or start adding flour while I am stirring.
I mix the added flour in with the dough.&lt;/p&gt;

&lt;p&gt;At this point I should probably let the dough rest for a bit to autolyse but normally I forget and just start with the kneading.
While I knead I try to keep the dough as wet as I want to deal with, as I start to knead it using the “slap” kneading method.
This method is shown in the &lt;a href=&quot;https://www.kingarthurflour.com/learn/guides/sourdough/bake&quot;&gt;King Arthur Kneading video&lt;/a&gt; and requires less effort than other methods and allows stickier dough to be handled.
This main kneading needs to be long and I do it for at least 10 minutes.
As you continue kneading the dough will start to get firmer and harder to knead.
This means you are closer to finishing.
I try to keep it sticky and will occasionally add flour to the outside to make it less sticky.
While I am kneading it, I add more flour based on the constency of the dough.
From &lt;a href=&quot;https://smile.amazon.com/dp/0143125338/ref=cm_sw_em_r_mt_dp_U_ZHoKEb3MET40D&quot;&gt;Cooked: A Natural History of Transformation&lt;/a&gt;, the wetter the dough, the better for artisan breads.
However, I like to find my happy middle ground with a sticky dough, but one that is dry enough to no lose its structure during the proofing process.
With really wet dough, you should fold the dough as it rises. With dryer dough, this is not required.
I would begin with the recipe and then start expirementing.
If you want to track expirements with the amount of ingredients in the recipe, you can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baker_percentage&quot;&gt;baker’s percentage&lt;/a&gt;, which measures the ratio of other ingreadetants by weight to that of the flour.
Of great inportance is the dough hydration, which is the baker’s percentage of water.
Once I am done kneading, I clean the large mixing bowl the dough was in, coat it with olive oil, then add the dough back to the bowl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-proof-initial.jpg&quot; alt=&quot;before proof&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I move the dough to my bread proofing box and wait a while.
You can easily make bread without a proofing box, but see more information about them &lt;a href=&quot;#bread-proofing-box&quot;&gt;here&lt;/a&gt;.
I either try to fold the bread every 30 min to 1 hour, if I am doing a particular wet dough as this helps the gluten form better, or I just let it sit without attention.
Like the recipe says, I wait anywhere between 2 and 5 hours as I watch it occasionally to see how it is rising.
Once I am convinced it has risen well, I do the short knock back kneading for around 2 minutes, then I divide the dough into two halves, shape it, and either add it to a &lt;a href=&quot;https://shop.kingarthurflour.com/items/king-arthur-standard-bread-loaf-pan-8-x-4&quot;&gt;bread loaf pan&lt;/a&gt; or a &lt;a href=&quot;https://shop.kingarthurflour.com/items/round-brotform&quot;&gt;brotform&lt;/a&gt;.
Often I will do both to make a round artesian loaf and a sandwich loaf.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-proof-final.jpg&quot; alt=&quot;after proof&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I let it rise in the proofing box for another 2 to 4 hours until it has risen.
Then I preheat the oven and bake the bread.
I spray the top of the bread with water (olive oil could also be used) and cut slits in the dough to let the air escape as it rises.
I usually start the oven off at 500°F for the first ten minutes to help the bread rise quickly.
Then I reduce the temperature to 425°F and add aluminum foil to prevent the crust from hardening as much as it finishes cooking for 15 to 20 more minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-final-rise.jpg&quot; alt=&quot;final rise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The finished bread is great while it is still hot.
The second loaf can be frozen if you don’t plan on eating it for a few days.
The bread will last for about a week before it becomes stale.
Slightly stale bread works great for french toast (even better than fresh bread in fact since it keeps together better as it soaks up the egg/milk mix); also any leftover bread which is stale can be blended into bread crumbs and stored in the freezer.
For bread crumbs the bread either has to be stale or toasted in order to blend into good bread crumbs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-cooked.jpg&quot; alt=&quot;bread cooked&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;waffles&quot;&gt;Waffles&lt;/h2&gt;
&lt;p&gt;My favorite waffle recipe is by far the &lt;a href=&quot;https://www.kingarthurflour.com/recipes/classic-sourdough-waffles-or-pancakes-recipe&quot;&gt;Classic Sourdough Waffles or Pancakes&lt;/a&gt; from King Arthur Flour.
These Waffles have a great sourdough taste to them.
I have found that you can leave excess batter in the fridge and cook it subsequent days without issues.
I would try to eat it up within three days though.
I also found that the sourdough flavor is slightly stronger each day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-waffle-1.jpg&quot; alt=&quot;waffle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bread-waffle-2.jpg&quot; alt=&quot;waffle&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bread-proofing-box&quot;&gt;Bread Proofing Box&lt;/h2&gt;
&lt;p&gt;I wanted to try using a proofing box to see if it would improve the quality of my sourdough bread.
However, I didn’t want to by a proofing box if it would not make a big impact.
So when I was thinking of a final group project idea for ECE551—Digital System Design, I decided to make my own “Smart” bread proofing box with temperature and humidity control, built-in automatic schedule, and a web interface.
The project was great fun and the final report can be found &lt;a href=&quot;/assets/bread-proofing-report.pdf&quot;&gt;here&lt;/a&gt;.
As part of the project, I also experimented with making bread with the bread box.
I found that the flavors of the bread were better when the bread box was used.
At this time I also decided to stop using sour salt in my bread, since I could get great natural sour flavors in my bread and I didn’t want to cover them up with the sour salt.
The bread proofer we made for the class worked great, but I ended up getting a &lt;a href=&quot;https://shop.kingarthurflour.com/items/folding-bread-proofer-and-slow-cooker&quot;&gt;commercial bread proofer&lt;/a&gt; mostly since it can fold down easily and was made out of sturdier materials.
The commercial bread proofer does lack a few of the features from the one I made.
It doesn’t have the proofing scheduling/timing, humidity control, or a web interface.
On the flip side the commercial one works well and folds down nicely.
However, its heating element works much better than the heat lamp I used.
The heat lamp would dry out the top of the dough.&lt;/p&gt;

&lt;p&gt;This video shows the bread proofer I made in action.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/CaS0XT1j_Mc&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Life" /><category term="Food" /><summary type="html">My favorite type of bread is a fresh, warm loaf of sourdough. I can almost go through a whole loaf by myself when it is fresh from the oven. Sourdough bread also makes the best french toast and great bread crumbs for wiener schnitzel. This post will go over the basics to getting started making sourdough bread. It includes links to the resources I used to get started, my favorite recipes, and some tips and tricks I have learned over my years of baking and experimenting for fun.</summary></entry></feed>