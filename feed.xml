<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://geekdude.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://geekdude.github.io/" rel="alternate" type="text/html" /><updated>2022-04-07T23:38:36-04:00</updated><id>https://geekdude.github.io/feed.xml</id><title type="html">Aaron Young</title><subtitle>Personal website for Aaron Young.</subtitle><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><entry><title type="html">Personal Knowledge Base and Productivity Presentation</title><link href="https://geekdude.github.io/research/productivity/" rel="alternate" type="text/html" title="Personal Knowledge Base and Productivity Presentation" /><published>2022-04-07T00:00:00-04:00</published><updated>2022-04-07T00:00:00-04:00</updated><id>https://geekdude.github.io/research/productivity</id><content type="html" xml:base="https://geekdude.github.io/research/productivity/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/productivity-presentation.pdf&quot;&gt;Personal Knowledge Base and Productivity Presentation Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: Look through the slides, and then read my commentary below for more information on interesting looking slides.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In October last year, I gave a presentation to my group at ORNL on my productivity/note-taking/engineering-notebook system.
Another word for this system is a Personal Knowledge Base (PKB) or a second brain.&lt;sup id=&quot;fnref:PKM&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:PKM&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
This system is inspired by many different systems, and I find it extremely valuable while conducting research.
If you are a knowledge worker or student, you will likely find this system useful also.
In lieu of a regular written article style blog post, I decided to try something different;
I will provide the slides for you to look at, then write my commentary for each slide below for you to read along with the slides.
This will save me some effort in restructuring the content of the talk, and it is helpful to look at the pictures that go along with the writing.
So for each slide, I will have a section of written commentary on that slide, and you can progress through the slides as you are reading the corresponding section.
In the slides, there are many links to internal and external information.
Any blue text is an internal link to another location in the slide deck, and any purple text is an external link for more information.&lt;/p&gt;

&lt;p&gt;So without further ado, welcome to my written presentation on productivity.&lt;/p&gt;

&lt;h2 id=&quot;part-1-building-a-second-brain&quot;&gt;Part 1: Building a Second Brain&lt;/h2&gt;

&lt;p&gt;In this first part, I talk about the most influential system on my own system, that of Building a Second Brain from Tiago Forte.&lt;/p&gt;

&lt;h3 id=&quot;slide-2--information-scarcity-vs-information-abundance&quot;&gt;Slide 2 — Information Scarcity vs Information Abundance&lt;/h3&gt;

&lt;p&gt;We now live in a time of information abundance.&lt;sup id=&quot;fnref:BASB&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:BASB&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
Much of the challenge in a knowledge based field such as research or academia comes from the overwhelming explosion of information that is now readily available in digital formats.
If the bodies of written wisdom in books were not overwhelming enough, you now have the entirety of the internet, electronic document repositories, email, multiple messaging applications, many code repositories, and a plethora of tools and open-source programs/libraries.
Most of this talk aims at techniques that can be used to avoid drowning in this abundance, and instead, of how to use this abundance to your advantage to thrive and become more productive.&lt;/p&gt;

&lt;p&gt;One of the challenges to overcome is to stop living like information is scarce and start living like it is abundant.
This means that not everything can be watched or listened to, so you have to be selective about what you give your attention to and be OK with putting it down early if it is not as helpful as your thought.
It means that information can be shared instead of hoarded.
With scarcity, you could miss out on important information and potentially consume the entire available knowledge on a topic; with abundance, there is no end to the stream of information, and you dip in and out of the stream as needed and collect the best information into your own pool of knowledge.&lt;/p&gt;

&lt;p&gt;The amount of knowledge that must be managed in daily life is overwhelming, and the solution to thriving instead of sinking in the abundance is to build a second brain or personal knowledge base.
This second brain will be a place for you to store and process your thoughts along with the abundance of external information.&lt;/p&gt;

&lt;h3 id=&quot;slide-5--building-a-second-brain&quot;&gt;Slide 5 — Building a Second Brain&lt;/h3&gt;

&lt;p&gt;This next section of the talk is all about the concepts found in &lt;a href=&quot;https://www.buildingasecondbrain.com/&quot;&gt;Building a Second Brain&lt;/a&gt;; although I haven’t taken the course, I have been learning about Building a Second Brain (BASB) through free online resources made available from Forte Labs.
There are many links on my slides, and they lead to useful resources or back to the places the information came from.
The Miro Board and the Illustrated notes are both great resources created by prior students of the class, but it helps to watch some of the free videos or read some of the free articles to understand the concepts.
I’m also greatly looking forward to the &lt;a href=&quot;https://smile.amazon.com/Building-Second-Brain-Organize-Potential-ebook/dp/B09LVVN9L3/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=1649119407&amp;amp;sr=8-1&quot;&gt;upcoming book on BASB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For each of my slides on a note-taking method, I will provide resources for further reading and key concepts from the method.
I am unable to go into too much detail on each method, but I wanted to cover the concepts that are the most helpful to me.&lt;/p&gt;

&lt;p&gt;This slide covers the major ideas of BASB.
As presented in the &lt;a href=&quot;https://miro.com/app/board/o9J_lEwGSa8=/&quot;&gt;Miro Board&lt;/a&gt;, I broke the content down into the steps of the productivity pipeline, which are C.O.D.E., Capture, Organize, Distill, and Express.
For each of these steps, Tiago presents a concept, technique, and exercise for the step.
The place where all these steps take place and where all the information is worked on is within the second brain.
On this slide, the blue links take you to another slide in the presentation.&lt;/p&gt;

&lt;p&gt;The key concepts listed in the bullets are the previously talked about information scarcity vs information abundance mindsets and the capture criteria of “capture what resonates with you.”
The things that you find interesting or grab your attention are the things you should capture in your second brain.&lt;/p&gt;

&lt;h3 id=&quot;slide-6--building-a-second-braincapture&quot;&gt;Slide 6 — Building a Second Brain—Capture&lt;/h3&gt;

&lt;p&gt;The first step in BASB is to have universal &lt;em&gt;capture&lt;/em&gt;, and it is about collecting all interesting information.
Anything you consume or create, or learn about should be able to be easily captured in the second brain.
The second brain should have a universal inbox where anything that captures your attention and resonates with you can be frictionlessly added to the second brain inbox.
The capture needs to be frictionless, otherwise its tempting to be too lazy to capture the information, or the capture process will be too slow for live capture.
For this step, don’t worry about where the information will go; just focus on having a method of capture that takes no effort.&lt;/p&gt;

&lt;h3 id=&quot;slide-7--para&quot;&gt;Slide 7 — PARA&lt;/h3&gt;

&lt;p&gt;The second step of &lt;em&gt;organize&lt;/em&gt;, is about where to put all the things that you have now captured in your universal inbox.
The method used is &lt;a href=&quot;https://fortelabs.co/blog/para/&quot;&gt;PARA&lt;/a&gt;.
In addition to the main four locations, I always include an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; as the inbox where everything can be initially placed before it is organized where it should go.
By having a capture place, you don’t have to think about where something should go as you are capturing it.&lt;/p&gt;

&lt;p&gt;The key principles of PARA are that you leverage the magic number 4, which is easily in the working memory of humans.
You have four categories, and each category tree should only have a depth of 4.
The second idea is that you mirror this PARA structure across all the applications you use.
Even if you can’t use only one program or file system, you can still replicate the same general structure across each.
The last idea is that it separates actional items from non-actionable items.&lt;/p&gt;

&lt;p&gt;The categories of PARA are Projects, Areas, Resources, and Archive.
Projects have a deadline, and they are the things you are actively working on.
In my case, they are the active projects that I am currently working on.
The scope of my projects is longer running (multiple years), but I can still keep all the information on that project in one place where I will want it in the future.
This has helped me to context switch between projects even when I have to put them down for weeks at a time.&lt;/p&gt;

&lt;p&gt;Areas are categories of responsibility that are never-ending.
These are obligations and things you must do but have no end, such as performance reviews, calls for papers, and weekly reviews.
I also put notes on working with particular vendors in the areas section.&lt;/p&gt;

&lt;p&gt;Resources are things that you want to keep around for reference, things that are still generally relevant, but you have no project or areas using them.
(If a project or area was using the note, then it would go there instead.)
I keep my notes on academic papers here, as well as general notes.&lt;/p&gt;

&lt;p&gt;Archive is for completed projects, areas that are no longer relevant, and notes that you want to keep but you don’t want in the resources category.
If something had no future use, then you can remove it, but I tend to the digital hoarder side, so if I think it had future potential use, but I don’t want to have it in the main categories, I will move it to archive.
In my archive, I also have the subfolders: projects, areas, and resources.
That way, when I’m looking for an archived item, I can find it in the same PARA structure.&lt;/p&gt;

&lt;p&gt;When naming PARA folders, I suggest naming them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 Inbox&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 Projects&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 Areas&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 Resources&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 Archive&lt;/code&gt;, so that the order is maintained when sorted.
PARA is a useful and convenient organization method, and it places the things that you access more frequently at the top, with things you are less likely to use at the bottom.
Using search to look in resources and archive is very helpful, and for these categories, I mostly access them via the search bar, whereas projects and areas I normally navigate to without search.&lt;/p&gt;

&lt;h3 id=&quot;slide-8--para&quot;&gt;Slide 8 — PARA&lt;/h3&gt;

&lt;p&gt;This image shows how I use the same PARA structure in multiple places.
This helps me stay organized and switch between programs with less friction.&lt;/p&gt;

&lt;h3 id=&quot;slide-9--progressive-summarization&quot;&gt;Slide 9 — Progressive Summarization&lt;/h3&gt;

&lt;p&gt;We are now in the &lt;em&gt;distill&lt;/em&gt; part of CODE.
In this step, the notes you have captured and organized are refined into more useful and beneficial notes.
I use the distill step to both progressively summarize notes and also to create index pages and build the internal linking between notes. Index pages are pages which summarize a topic or provide additional structure by linking to other pages.
Index pages are also a landing page for knowledge on a particular topic.&lt;/p&gt;

&lt;p&gt;For progressive summarization, each time you touch a note, you try to make it easier for your future self to skim next time.
So each time you look at it, you can add another level of the summarization.
The idea here is that the summarization happens over many passes of working with the note.
Each time you touch a note, try to leave it a little better than you found it.
Add more links, summarize, or add clarification to the notes.&lt;/p&gt;

&lt;p&gt;Another idea is that a wall of text is hard to read, but text with bolding and highlighting, text that has the main points pulled out, is easy to skim and to remind yourself of the content quickly without having to do a full read.
This allows notes to be reviewed by yourself very quickly at a glance.&lt;/p&gt;

&lt;p&gt;The basic five levels of progressive summarization are shown in the slide.
For more information on progressive summarization, see &lt;a href=&quot;https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/&quot;&gt;Progressive Summarization: A Practical Technique for Designing Discoverable Notes&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;slide-10--progressive-summarization-landscape&quot;&gt;Slide 10 — Progressive Summarization Landscape&lt;/h3&gt;

&lt;p&gt;This slide shows the landscape of notes which have been progressively summarized.
Each node is at a different point of the summarization process, with untouched nodes still lower in the stack, but certain high-quality, relevant notes have been through all the steps.
This makes a landscape of knowledge with the most relevant notes standing out amongst the others.&lt;/p&gt;

&lt;h3 id=&quot;slide-11--intermediate-packets&quot;&gt;Slide 11 — Intermediate Packets&lt;/h3&gt;

&lt;p&gt;With Intermediate Packets, we are now in the &lt;em&gt;express&lt;/em&gt; part of CODE.
Here is where notes are mature enough that you create something from them.
My blog posts represent completed packets, but you can also have progress reports, one-slide summaries, and many other types of intermediate packets.
An intermediate packet is just the encapsulated work where you create something that can be shared with others.
It goes along with the saying, “We only know what we make”, so by creating content, you learn and create something of value to share.&lt;/p&gt;

&lt;h3 id=&quot;slide-12--ways-of-creating-intermediate-packets&quot;&gt;Slide 12 — Ways of Creating Intermediate Packets&lt;/h3&gt;

&lt;p&gt;This slide covers the activities that result in intermediate packets.&lt;/p&gt;

&lt;h3 id=&quot;slide-12--kinds-of-intermediate-packets&quot;&gt;Slide 12 — Kinds of Intermediate Packets&lt;/h3&gt;

&lt;p&gt;This slide shows additional examples of intermediate packets.&lt;/p&gt;

&lt;h3 id=&quot;slide-13--divergence-and-convergence&quot;&gt;Slide 13 — Divergence and Convergence&lt;/h3&gt;

&lt;p&gt;Now that we have covered the tools to &lt;em&gt;capture&lt;/em&gt;, &lt;em&gt;organize&lt;/em&gt;, &lt;em&gt;distill&lt;/em&gt;, and &lt;em&gt;express&lt;/em&gt;, let’s look at the complete process as a whole in more detail.
From the starting point, you explore and capture and learn all you can.
This is the divergence of information.
Then when you distill, you start to exploit what you have learned and condense it down into something that you want to express and turn into a final deliverable.
This pattern goes along with the idea of exploration vs exploitation found in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-armed_bandit&quot;&gt;multi-armed bandit machine learning problem&lt;/a&gt;.
Each project you work on should have a similar pattern of breathing in a breadth of information and then breathing out a distilled, condensed deliverable from the information you gathered.&lt;/p&gt;

&lt;h3 id=&quot;slide-14--just-in-time-project-management&quot;&gt;Slide 14 — Just-in-Time Project Management&lt;/h3&gt;

&lt;p&gt;Also known as the being a lazy project manager.&lt;sup id=&quot;fnref:LDM&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:LDM&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I like to combine this idea with lazy note-taking and other just-in-time activities, like lazy progressive summarization.
Basically, you do the work when you need to, while reusing, and rehashing previous research and effort.
Lazy performance reviews are built from lazy quarterly reports which are built from lazy weekly updates, which are built from a lazy daily log.
Basically, at each step, I reuse parts from the previous step so that no part of the process is all that difficult.
I lazily improve my notes as I work with them.
Each time I don’t put in that much effort to improve them, but over time they are very valuable.
More in line with the lazy project cycle, the artifacts from previously completed projects are then recycled back into the second brain to become useful components for future projects.&lt;/p&gt;

&lt;h3 id=&quot;slide-15--101-principles-for-building-a-second-brain&quot;&gt;Slide 15 — 10+1 Principles for Building a Second Brain&lt;/h3&gt;

&lt;p&gt;These are the 10 (plus a bonus) principles for building a second brain.
I think they are fairly clear from the slide.
These are the core ideas for building a second brain.
For more details, listen to &lt;a href=&quot;https://fortelabs.co/blog/basbpodcast&quot;&gt;Tiago’s Podcast&lt;/a&gt; or read &lt;a href=&quot;https://fortelabs.co/blog/the-10-principles-of-building-a-second-brain/&quot;&gt;The 10 Principles of Building a Second Brain&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;slide-16--solution-to-information-overload&quot;&gt;Slide 16 — Solution to Information Overload&lt;/h3&gt;

&lt;p&gt;Taking the second brain concepts and CODE process together, the second brain becomes a solution to information overload where you repeatedly follow the steps on this slide.
These steps are similar to the process of Getting Things Done (GTD).&lt;/p&gt;

&lt;h2 id=&quot;part-2-other-personal-knowledge-base-systems&quot;&gt;Part 2: Other Personal Knowledge Base Systems&lt;/h2&gt;

&lt;p&gt;Now I transition to talking about other systems that have had an influence on my own system.&lt;/p&gt;

&lt;h3 id=&quot;slide-18--commonplace-book&quot;&gt;Slide 18 — Commonplace Book&lt;/h3&gt;

&lt;p&gt;The main takeaway from this system is that it is a common, central resource for everything.
This has inspired me to store everything I find meaningful in my PKB.
The other key idea is to always have a way to be able to take quick notes and add to the commonplace book.
The way I incorporate this idea, is that I used to carry around a moleskin notebook, and I still have an active bullet journal, but now since I use OneNote heavily, I can just add a note from anywhere from my phone to my OneNote inbox.
The last key concept is to use the commonplace book to keep from forgetting thoughts and ideas.
“A thought you don’t write down is as good as a thought you never had.”&lt;/p&gt;

&lt;h3 id=&quot;slide-19--bullet-journal&quot;&gt;Slide 19 — Bullet Journal&lt;/h3&gt;

&lt;p&gt;The way I rapidly log my daily engineering journal is very similar to the Bullet Journal method.
The advantage of the digital OneNote version is that it is easy to create links from the bullet to another page with more detail.
(Although the same could easily be done on paper with a page reference at the end of the line.)
I also keep a personal analog bullet journal, and I am now on volume 4.&lt;/p&gt;

&lt;p&gt;One other tidbit I found useful is that after I finish a bullet journal, I can copy the index into OneNote so that when I am searching for a topic, I find the item in the index and know where to look in the physical book.
Another interesting idea from Bullet Journal, is that you can create different “Collections,” which are just a fancy way of saying pages with a particular layout and use.
Since these collections are created on a blank sheet of paper, the concepts can translate to any medium.
The default collections presented by Bullet Journal are very useful for pen and paperwork, but the same types of tools might be implemented automatically by a digital tool or can be included as pages in the digital tool.&lt;/p&gt;

&lt;h3 id=&quot;slide-20--zettlekästen-luhmanns-slip-box&quot;&gt;Slide 20 — Zettlekästen (Luhmann’s Slip-Box)&lt;/h3&gt;

&lt;p&gt;The Zettlekästen was a second brain created entirely using index cards for notes.
These notes then had many internal references to other notes, which built up a huge web of knowledge.
Related notes are linked to other related notes.
Although the filing cabinets full of notes are impressive, this system translates well to digital systems where hyperlinks can be made between notes.
A key of this system is that you need a unique identifier for each note so that you can create links to it.
The system is valuable from the emerging connectivity between ideas.
Each idea should be atomic and stand on its own, with one idea per note.
The system is expandable in any direction and represents the wavefront of your knowledge in each area.&lt;/p&gt;

&lt;p&gt;Another key idea is that there are multiple types of notes and that each node should be handled differently and used differently.
These note types are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fleeting Notes — Quick notes to remind you of an idea, they will be turned into a permanent note and then discarded.&lt;/li&gt;
  &lt;li&gt;Literature Notes — Notes on a piece of writing that are tied to the bibliography of the source for future citing.&lt;/li&gt;
  &lt;li&gt;Permanent Notes — Notes in your own words that are refined so that they are atomic and can stand alone. These are added to the slip-box and never removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This system was created with writing academic papers in mind, and the book &lt;em&gt;How to Take Smart Notes&lt;/em&gt; goes over the writing method as well as the Zettlekästen design.&lt;/p&gt;

&lt;h2 id=&quot;part-3-note-taking-tools&quot;&gt;Part 3: Note Taking Tools&lt;/h2&gt;

&lt;p&gt;In this part, I go over a comparison of methods for taking notes and the tools that could be used for note-taking.&lt;/p&gt;

&lt;h3 id=&quot;slide-22--note-taking-comparisons&quot;&gt;Slide 22 — Note-Taking Comparisons&lt;/h3&gt;

&lt;p&gt;These slides are a series of versions of statements with different note-taking styles compared.
In each case, I think both sides are useful and can be used together.&lt;/p&gt;

&lt;h4 id=&quot;knowledge-network-vs-knowledge-hierarchies&quot;&gt;Knowledge Network vs Knowledge Hierarchies&lt;/h4&gt;

&lt;p&gt;This is comparing a more traditional index as you would find in a book with the web of links you would find on a wiki page.
I think both organizational methods are good.
A hierarchy is good for locating a note manually, and a web of links is great for representing connections between notes.
In my system, I use OneNote with a &lt;a href=&quot;#slide-7--para&quot;&gt;PARA&lt;/a&gt; organizational hierarchy for placing notes in a notebook, then I make heavy use of internal links and index pages to re-represent information and connect related information together.&lt;/p&gt;

&lt;h4 id=&quot;search-vs-locate&quot;&gt;Search vs Locate&lt;/h4&gt;

&lt;p&gt;Notes can either be searched for using the search bar of an application or they can be located based on their location in the notebook.
As I mentioned in the &lt;a href=&quot;#slide-7--para&quot;&gt;PARA&lt;/a&gt; section, I used both methods.
When I am switching contexts between projects, and I know where the notes are located, I navigate to them directly by clicking on them in the hierarchy.
If I’m looking for a resource page, I will jump to it quickly by searching for the name of the resource.
Sometimes I do both; I search for an index page by name, then I click on the link to the place I want to go.
Other times I’m not sure what I am looking for, and I leverage the power of search to look for keywords on a page where I’m not sure what I will find.
With these kinds of searches, I’m sometimes surprised that I have notes on a topic that I forgot about.&lt;/p&gt;

&lt;h4 id=&quot;one-note-per-source-vs-one-note-per-idea&quot;&gt;One Note per Source vs One Note per Idea&lt;/h4&gt;

&lt;p&gt;How much information should be on each note?
Again the answer depends.
For myself, if I am taking notes on a resource, I will create one note per source of information.
Then as I process the ideas, I will switch to one note per topic.
If an idea is a big idea or stands alone, I will then move it to its own note.
By in large, I have medium-length notes and try to keep the note length to what can be easily scrolled through.
If a note is too long, I will look for ways to break it up.
I don’t often mind notes being short, but I don’t want to fill my notebook sections with too many small notes.&lt;/p&gt;

&lt;p&gt;I think the best solution to this problem is to reduce the granularity at which you can create internal links.
OneNote almost has the right idea here with the ability to create internal links to paragraphs; however, the implementation is bad, and these kinds of links are fragile.
Most systems support linking to a heading, this is generally still close enough to get you to the right location in the notes.
The key here is that the link between content should make it obvious to what you are linking to.
If you take long pages of notes, then a link at the page level is less useful than a link to a header or to a paragraph.&lt;/p&gt;

&lt;h4 id=&quot;fluid-vs-structure&quot;&gt;Fluid vs Structure&lt;/h4&gt;

&lt;p&gt;The idea here is whether one should have a strict structure or template for notes, or if each note should have a fluid ad hoc design.
Here again, I tend to the middle ground, where I found that for some types of notes, it is useful to have some common components; but by in large, I am fluid on a note-to-note basis, where each note builds up based on the content of the note.
Then if I want to restructure the note later, I can without too much difficulty.
So, in general, I start with a black page when I make a new note.
Some specific pages, like my weekly reports or bibliography notes have a more rigid structure.&lt;/p&gt;

&lt;h3 id=&quot;slide-23--consideration-for-a-note-taking-program&quot;&gt;Slide 23 — Consideration for a Note-Taking Program&lt;/h3&gt;

&lt;p&gt;Here I list of what I think should be important things to consider when you are selecting which note-taking program to use.
As an example, I will go through the list with my current program of choice, OneNote.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OneNote can easily capture any type of information, from typed notes to handwritten notes to webpages to whiteboards.&lt;/li&gt;
  &lt;li&gt;OneNote has powerful search capabilities and can even search inside images and handwritten notes.&lt;/li&gt;
  &lt;li&gt;OneNote is available on Windows, Mac, Android, iPhone, and via the web. So I can access it from anywhere.&lt;/li&gt;
  &lt;li&gt;OneNote is backed up locally with the windows client and on the cloud.&lt;/li&gt;
  &lt;li&gt;OneNote can encrypt certain notes with a password.&lt;/li&gt;
  &lt;li&gt;OneNote has a default structure similar to physical notebooks with a Notebook → Section Group → Section → Page hierarchy. Other structures can be created via hyperlinks.&lt;/li&gt;
  &lt;li&gt;OneNote can easily hyperlink to websites, files, sections, pages, or paragraphs.&lt;sup id=&quot;fnref:paragraph&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paragraph&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;OneNote makes it easy to move or reformat notes.&lt;/li&gt;
  &lt;li&gt;This is one of the areas where OneNote does a bad job. It is difficult to import or export notes from other note-taking apps. OneNote does work OK with the rest of the office suite, and pages can be shared by email.&lt;/li&gt;
  &lt;li&gt;Again here, OneNote is so-so. Attached files can be easily opened from OneNote, but the notes themselves cannot be edited directly by an external program.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So based on these criteria, OneNote gets an 8 out of 10 with a few areas it could improve on.
OneNote is still my program of choice because of the ease of capture, ease of restructuring and reformating, power of the hyperlinks, and because of their unmatched support for the pen and handwritten note-taking with all the other features as well.
I won’t claim that OneNote is the best for handwritten notes, but it does seem to be the best for a hybrid of handwritten and typed notes.&lt;/p&gt;

&lt;h3 id=&quot;slide-24--note-taking-programs&quot;&gt;Slide 24 — Note-Taking Programs&lt;/h3&gt;

&lt;p&gt;Here is my list of good note-taking programs.
From this list, the ones I have used heavily are the paper lab notebooks, VimWiki, and OneNote.
I have also used Evernote to a lesser extent.
As mentioned prior, I keep a Bullet Journal and use OneNote for my digital notes.&lt;/p&gt;

&lt;p&gt;The other programs on this list are highly recommended by the note-taking community, and I have installed and tried out most of them.
I put my short notes for each one on the slide.
Of this list, I am keeping a closer eye on Obsidian and Notion as both are gaining a lot of traction in the note-taking community.
Obsidian is my favorite markdown-based note-taking program, and Notion is my favorite collaborative system.&lt;/p&gt;

&lt;h2 id=&quot;part-4-my-personal-knowledge-base-system&quot;&gt;Part 4: My Personal Knowledge Base System&lt;/h2&gt;

&lt;p&gt;Here I go over my own personal system in more detail.&lt;/p&gt;

&lt;h3 id=&quot;slide-26--my-personal-knowledge-base-story&quot;&gt;Slide 26 — My Personal Knowledge Base Story&lt;/h3&gt;

&lt;p&gt;This slide goes over the progression of my PKB over time.
I first started with a custom duct tape folder with many nerdy features, which had a clipboard with my weekly task sheet.
That is what I used in high school to keep track of academic work.&lt;/p&gt;

&lt;p&gt;For my personal journaling/note-taking, I started with a more traditional long-form journal in volume 1; then, for volume 2, I switched to a bullet journal style.
Now volume 4 is still using the bullet journal style.
I don’t use the handwritten notebooks as much, so it takes a few years for me to fill one up, but I like to still have it and use it.&lt;/p&gt;

&lt;p&gt;Next, during internships, I used a physical engineering notebook where I kept all my notes.
This worked well when I was primarily only working on one project at a time, and it took a long time to fill up a single book.
I outgrew this system in grad school when I filled up notebooks and had more trouble finding previous notes. At this point I was using multiple three-ringed binders to keep my physical notes.&lt;/p&gt;

&lt;p&gt;From there, I switched to VimWiki, which I used in the terminal on Linux, along with my code and paper writing in LaTeX.
The problem with VimWiki was that it was harder to capture images, and I still needed to do my visual thinking on paper since I like to think using handwriting.
I based my VimWiki on a &lt;a href=&quot;https://biarri.com/an-efficient-and-effective-research-environment/&quot;&gt;research structure I found on the internet&lt;/a&gt;, then later, I restructured my VimWiki using a Zettlekästen style.
At this point, I was also trying out using a Rocketbook with Evernote to handle my handwritten notes.&lt;/p&gt;

&lt;p&gt;Finally, we get to where I am now, which is using PARA with OneNote.
When I started my new job at ORNL, I switched to a windows machine for my main computer, and OneNote is a supported electronic lab notebook tool. I have greatly enjoyed using it, apart from a few various gripes.&lt;/p&gt;

&lt;h3 id=&quot;slide-27--demo-my-personal-knowledge-base&quot;&gt;Slide 27 — Demo My Personal Knowledge Base&lt;/h3&gt;

&lt;p&gt;During the actual talk, I gave a live demo of my note-taking system.
Since this presentation is written, I will give more details on my OneNote structure.&lt;/p&gt;

&lt;p&gt;I’ve been using PARA with OneNote for work and personal use since I started my current job a year and a half ago.
I am a Software Engineer/Researcher for Oak Ridge National Laboratory, so I have many active projects and technical notes to keep track of.
My second brain stored in OneNote with PARA organization has been an indispensable resource to me.&lt;/p&gt;

&lt;p&gt;My OneNote structure is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Notebook for Work
    &lt;ul&gt;
      &lt;li&gt;Inbox&lt;/li&gt;
      &lt;li&gt;Journal (Daily log of research activities)
        &lt;ul&gt;
          &lt;li&gt;I use my journal to track tasks I work on and links to meetings and note pages.&lt;/li&gt;
          &lt;li&gt;I use note hierarchy to organize and minimize notes by year.&lt;/li&gt;
          &lt;li&gt;At the bottom of the current month, I also keep my todo tasks list organized by project with a todo today, todo next, and todo inbox.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Notes (General notes. This could be in 3 Resources, but I keep it here since I add to it frequently. Notes in here I find primarily from search)&lt;/li&gt;
      &lt;li&gt;[SG] 1 Projects
        &lt;ul&gt;
          &lt;li&gt;[SG] Name of first project
            &lt;ul&gt;
              &lt;li&gt;Notes - Name of first project&lt;/li&gt;
              &lt;li&gt;Meetings - Name of first project&lt;/li&gt;
              &lt;li&gt;Emails - Name of first project&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;[SG] Name of second project
            &lt;ul&gt;
              &lt;li&gt;….&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;[SG] 2 Areas
        &lt;ul&gt;
          &lt;li&gt;Various area sections and section groups&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;[SG] 3 Resources
        &lt;ul&gt;
          &lt;li&gt;Various resource sections and section groups&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;[SG] 4 Archive
        &lt;ul&gt;
          &lt;li&gt;Same PARA structure for inactive resources.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Personal Notebook
    &lt;ul&gt;
      &lt;li&gt;… similar PARA structure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[SG] is a section group.&lt;/p&gt;

&lt;p&gt;Tips and Tricks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Section groups are sorted alphanumerically, so you can use numbers to force a sort order. (i.e., “1 Projects”, “2 Areas”, …)&lt;/li&gt;
  &lt;li&gt;Use hyperlinks and index pages.
    &lt;ul&gt;
      &lt;li&gt;You can hyperlink internally to any paragraph, this is super powerful, and I use it to link notes together in a Zettlekästen like web. I like the mix of hyperlinks and hierarchical sections for organizing notes—the best of both organization methods. Specific index landing pages with hyperlinks can be a view into your notes with a different organization.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add “- project name” to sections that have names that are the same in different section groups.
    &lt;ul&gt;
      &lt;li&gt;This makes it much easier to find the correct section to move an item to when you move a note.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Only put content in one place. Hyperlink if you want it somewhere else. This means I don’t copy notes; I just move them to the most logical place.&lt;/li&gt;
  &lt;li&gt;I have found that OneNote is less keyboard friendly for key bindings, so I use a stream deck and macros to make it much easier to do common OneNote Operations.&lt;/li&gt;
  &lt;li&gt;If you are using OneNote on a windows desktop, you can install Onetastic, which adds some missing features in OneNote and the ability to write advanced macros. (I wrote my own macros to make the conversion from my previous second brain in VimWiki to OneNote easier.)&lt;/li&gt;
  &lt;li&gt;Integration with Outlook is great if your work also uses Outlook for email.&lt;/li&gt;
  &lt;li&gt;Sending note pages via email also works great.&lt;/li&gt;
  &lt;li&gt;Pen support with a pen display or iPad is great. So are pictures of whiteboards or screenshots of presentations. OneNote attempts to do OCR on pictures and handwriting with various levels of success. Still, it was good enough for me to rediscover useful information that I had written in cursive using search.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-5-productivity-tools&quot;&gt;Part 5: Productivity Tools&lt;/h2&gt;

&lt;p&gt;At this point of the talk, I switch from talking about PKB and start talking about various productivity tools for Software Engineers/Researchers.&lt;/p&gt;

&lt;h3 id=&quot;slide-29--useful-hardware-for-remote-work&quot;&gt;Slide 29 — Useful Hardware for Remote Work&lt;/h3&gt;

&lt;p&gt;On the slide is a picture of my remote work setup.
I found it great to have a pen display for digital handwritten notes and for remote whiteboarding.
A stream deck is wonderful for easily creating macros.
The best part is that since the buttons have a screen, you can see what each button will do.
When you switch programs, the macros switch as well.
The stream deck tasks some time to manually set up, but it is a joy to use and a great time saver once set up.
I especially like using it with OneNote since OneNote keybindings are limited, but with macros, I can leverage alt menu navigation to perform complex functions with a single button press.
I recommend having a nice docking station or a desktop computer.
In my setup, I have a dual laptop stand and USB Type-C dock, which works with both my personal and work computer.&lt;/p&gt;

&lt;p&gt;Update: Now that I am working at the office, I have a similar setup at work so that it is easy to switch from at home and on-site work.&lt;/p&gt;

&lt;h3 id=&quot;slide-30--stream-deck&quot;&gt;Slide 30 — Stream Deck&lt;/h3&gt;

&lt;p&gt;This slide shows off some of my custom Stream Deck macro pages for various applications.&lt;/p&gt;

&lt;h3 id=&quot;slide-31--jabref&quot;&gt;Slide 31 — JabRef&lt;/h3&gt;

&lt;p&gt;JabRef is an amazing tool for managing bibliographies if you primarily write papers using LaTeX with the bibliographies in the BibTeX or BibLaTeX format.
I keep my JabRef bibliography in Git, and I have a personal repository and a shared repository within my group at ORNL.
I started using JabRef in grad school, and it continues to work well.&lt;/p&gt;

&lt;h3 id=&quot;slide-32--slack&quot;&gt;Slide 32 — Slack&lt;/h3&gt;

&lt;p&gt;This slide has some of the main tips for using slack from a slack training I attended.&lt;/p&gt;

&lt;h3 id=&quot;slide-33--project-management-in-gitlab&quot;&gt;Slide 33 — Project Management in GitLab&lt;/h3&gt;

&lt;p&gt;Project management in GitLab, GitHub, or Bitbucket is great, and I highly recommend leveraging the tools to manage projects.
One thing that has been useful for research projects is to create a project repo that tracks the project as a whole and can be used to store all the artifacts from the project.
The issue board can keep track of tasks and discussions on topics.
Separate code repos can be added to the project repo as submodules for organization.
READMEs and wikis can be used to keep shared knowledge on the project.&lt;/p&gt;

&lt;h3 id=&quot;slide-34--weekly-review&quot;&gt;Slide 34 — Weekly Review&lt;/h3&gt;

&lt;p&gt;I follow a process similar to &lt;a href=&quot;https://fortelabs.co/blog/the-one-touch-guide-to-doing-a-weekly-review/&quot;&gt;Tiago’s Guide to doing a weekly review&lt;/a&gt;.
This process is helpful for me to keep my digital workspace uncluttered.&lt;/p&gt;

&lt;p&gt;The next two slides are from &lt;a href=&quot;https://fortelabs.co/blog/the-one-touch-guide-to-doing-a-weekly-review/&quot;&gt;Tiago’s Guide to doing a weekly review&lt;/a&gt; and highlight the process.&lt;/p&gt;

&lt;h3 id=&quot;slide-37--weekly-review&quot;&gt;Slide 37 — Weekly Review&lt;/h3&gt;

&lt;p&gt;This slide gives an overview of the steps to a weekly review, and I would recommend reading and watching Tiago’s material for more details on the process.&lt;/p&gt;

&lt;h3 id=&quot;slide-38--task-tracking&quot;&gt;Slide 38 — Task Tracking&lt;/h3&gt;

&lt;p&gt;I would recommend tracking tasks and using a productivity method similar to GTD.&lt;/p&gt;

&lt;h3 id=&quot;slide-39--time-tracking&quot;&gt;Slide 39 — Time Tracking&lt;/h3&gt;

&lt;p&gt;I used &lt;a href=&quot;https://toggl.com/track/&quot;&gt;Toggl Track&lt;/a&gt; to track the time I spend on various projects.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;I included my summary of &lt;a href=&quot;https://fortelabs.co/blog/how-to-take-smart-notes/&quot;&gt;Tiago’s summary of How to Take Smart Notes&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:PKM&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The methods can also be referred to as a Personal Knowledge Management (PKM). &lt;a href=&quot;#fnref:PKM&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:BASB&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The slide is from &lt;a href=&quot;https://miro.com/app/board/o9J_lEwGSa8=/&quot;&gt;Building a Second Brain Miro Board&lt;/a&gt; and idea of living in the abundance of information instead of scarcity comes from Tiago Forte. &lt;a href=&quot;#fnref:BASB&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:LDM&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Taken from the idea of &lt;a href=&quot;https://slyflourish.com/lazydm/&quot;&gt;The Lazy Dungeon Master&lt;/a&gt; &lt;a href=&quot;#fnref:LDM&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paragraph&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Although paragraph linking is currently too fragile to be relied on, since moving a page to a new location will break the paragraph links. &lt;a href=&quot;#fnref:paragraph&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Research" /><category term="Productivity" /><category term="BASB" /><category term="PKB" /><summary type="html">In October last year, I gave a presentation to the my group at ORNL on my productivity/notetaking/engineering-notebook system. Another word for this system is a Personal Knowledge Base (PKB) or a second brain.</summary></entry><entry><title type="html">Changing from Disqus to Utterances</title><link href="https://geekdude.github.io/tech/changing-to-utterances/" rel="alternate" type="text/html" title="Changing from Disqus to Utterances" /><published>2021-10-31T00:00:00-04:00</published><updated>2021-10-31T00:00:00-04:00</updated><id>https://geekdude.github.io/tech/changing-to-utterances</id><content type="html" xml:base="https://geekdude.github.io/tech/changing-to-utterances/">&lt;p&gt;I have been having an issue where &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; would not send me any emails when new comments are posted to the website.
After going through all the settings in Disqus, changing my email address, and testing adding comments using a guest login, I could not figure out how to get email notifications to work.
Because of this, I changed to using &lt;a href=&quot;https://utteranc.es/&quot;&gt;Utterances&lt;/a&gt; for my website’s comments.
Utterances’ is a great choice since it is open-source and uses the issues tracker of the GitHub repository to store the comments.
Each page is its own issue, and the comments are added to the issue.
Now email notification works just like GitHub’s issue email notification system.
The main downside to Utterances is that you have to log in to a GitHub account in order to post a comment.
I liked the flexibility that Disqus provided in terms of login types and guest posting, but I need a commenting system that notifies me when new comments are added, and I like that comments are stored as issues in the issue tracker.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Website" /><summary type="html">I have been having an issue where Disqus would not send me any emails when new comments are posted to the website. After going through all the settings in Disqus, changing my email address, and testing adding comments using a guest login, I could not figure out how to get email notifications to work. Because of this, I changed to using Utterances for my website’s comments. Utterances’ is a great choice since it is open-source and uses the issues tracker of the GitHub repository to store the comments. Each page is its own issue, and the comments are added to the issue. Now email notification works just like GitHub’s issue email notification system. The main downside to Utterances is that you have to log in to a GitHub account in order to post a comment. I liked the flexibility that Disqus provided in terms of login types and guest posting, but I need a commenting system that notifies me when new comments are added, and I like that comments are stored as issues in the issue tracker.</summary></entry><entry><title type="html">Dr. Dean to Serve on National Artificial Intelligence Research Resource Task Force</title><link href="https://geekdude.github.io/tech/dean-nairr/" rel="alternate" type="text/html" title="Dr. Dean to Serve on National Artificial Intelligence Research Resource Task Force" /><published>2021-07-11T00:00:00-04:00</published><updated>2021-07-11T00:00:00-04:00</updated><id>https://geekdude.github.io/tech/dean-nairr</id><content type="html" xml:base="https://geekdude.github.io/tech/dean-nairr/">&lt;p&gt;My PhD advisor, Mark Dean, was recentally selected to server on the National Artificial Intelligence Research Resource (NAIRR) Task Force. 
Read more about it at &lt;a href=&quot;https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/&quot;&gt;https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="News" /><summary type="html">My PhD advisor, Mark Dean, was recentally selected to server on the National Artificial Intelligence Research Resource (NAIRR) Task Force. Read more about it at https://www.eecs.utk.edu/parker-dean-to-serve-on-national-artificial-intelligence-research-resource-task-force/.</summary></entry><entry><title type="html">Brother’s Acting Demo Reel</title><link href="https://geekdude.github.io/life/prestons-demo-reel/" rel="alternate" type="text/html" title="Brother’s Acting Demo Reel" /><published>2021-06-08T00:00:00-04:00</published><updated>2021-06-08T00:00:00-04:00</updated><id>https://geekdude.github.io/life/prestons-demo-reel</id><content type="html" xml:base="https://geekdude.github.io/life/prestons-demo-reel/">&lt;p&gt;I helped my brother Preston edit together an acting demo reel using DaVinci Resolve. Check it out on his website at &lt;a href=&quot;https://volweb.utk.edu/~pyoung15/acting/&quot;&gt;https://volweb.utk.edu/~pyoung15/acting/&lt;/a&gt; or watch it below on Youtube.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/H43XMSqUuj8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Life" /><category term="DaVinci Resolve" /><summary type="html">I helped my brother Preston edit together an acting demo reel using DaVinci Resolve. Check it out on his website at https://volweb.utk.edu/~pyoung15/acting/ or watch it below on Youtube.</summary></entry><entry><title type="html">Happy Mother’s Day</title><link href="https://geekdude.github.io/life/happy-mothers-day/" rel="alternate" type="text/html" title="Happy Mother’s Day" /><published>2021-05-09T00:00:00-04:00</published><updated>2021-05-09T00:00:00-04:00</updated><id>https://geekdude.github.io/life/happy-mothers-day</id><content type="html" xml:base="https://geekdude.github.io/life/happy-mothers-day/">&lt;p&gt;Happy Mother’s Day! Below is a blender animation I made a few years ago after following the &lt;a href=&quot;https://www.youtube.com/watch?v=TPrnSACiTJ4&amp;amp;list=PLexwJr_iILK7IkuhEeAYeN7aLV5AAXKa-&quot;&gt;Blender Guru’s Donut Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/FBvJ1h-pKv8&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Life" /><category term="Blender" /><summary type="html">Happy Mother’s Day! Below is a blender animation I made a few years ago after following the Blender Guru’s Donut Tutorial.</summary></entry><entry><title type="html">ASCR Workshop on Reimagining Codesign Whitepaper</title><link href="https://geekdude.github.io/research/ascr-reimagining-codesign/" rel="alternate" type="text/html" title="ASCR Workshop on Reimagining Codesign Whitepaper" /><published>2021-03-10T00:00:00-05:00</published><updated>2021-03-10T00:00:00-05:00</updated><id>https://geekdude.github.io/research/ascr-reimagining-codesign</id><content type="html" xml:base="https://geekdude.github.io/research/ascr-reimagining-codesign/">&lt;p&gt;My whitepaper titled &lt;a href=&quot;https://custom.cvent.com/DCBD4ADAAD004096B1E4AD96F3C8049E/files/event/f64a4f28b4734808924cc8c3d9a2af63/32fd0b3c80c04326a2adf6827290512f.pdf&quot;&gt;Emerging Heterogeneous Systems Provide Great Opportunities for Codesign&lt;/a&gt; for the &lt;a href=&quot;https://web.cvent.com/event/f64a4f28-b473-4808-924c-c8c3d9a2af63/summary&quot;&gt;ASCR Workshop on Reimagining Codesign&lt;/a&gt; was accepted.&lt;/p&gt;

&lt;p&gt;All the accepted whitepapers can be found &lt;a href=&quot;https://web.cvent.com/event/f64a4f28-b473-4808-924c-c8c3d9a2af63/websitePage:38a39b7a-d1af-4643-82ac-8fcf1069773b&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Research" /><category term="Heterogeneous Systems" /><summary type="html">My whitepaper titled Emerging Heterogeneous Systems Provide Great Opportunities for Codesign for the ASCR Workshop on Reimagining Codesign was accepted.</summary></entry><entry><title type="html">Getting started with Ctags with Vim and Git.</title><link href="https://geekdude.github.io/tech/ctags/" rel="alternate" type="text/html" title="Getting started with Ctags with Vim and Git." /><published>2021-03-05T00:00:00-05:00</published><updated>2021-03-05T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/ctags</id><content type="html" xml:base="https://geekdude.github.io/tech/ctags/">&lt;p&gt;&lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;Ctags&lt;/a&gt; with Vim are incredibly useful for quickly navigating around code.
With them, Vim can jump between symbols to quickly go to the definition of symbols or find keywords within the document.
Ctags + Vim end up working very similar to how &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; or other IDEs “go to definition” and “find all symbols works.”&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;http://ctags.sourceforge.net/whatis.html&quot;&gt;ctags website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility. A tag signifies a language object for which an index entry is available (or, alternatively, the index entry created for that object).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ctags-with-vim&quot;&gt;Ctags with Vim&lt;/h2&gt;

&lt;p&gt;Ctags can be annoying to use because you have to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctags&lt;/code&gt; program to generate a tag file, which then needs to be found by Vim to be used.
If the code changes, then the tag file will need to be re-updated.
One way to set up ctags is to map a Vim keypress to generate the ctags.
In my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimrc&lt;/code&gt;, I set it up to regenerate ctags when I press &amp;lt;F5&amp;gt; while not in a &lt;img src=&quot;http://latex.codecogs.com/gif.latex?\LaTeX&quot; border=&quot;0&quot; /&gt; file.
More on the ctags command later.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Set f5 to generate tags for non-latex files&lt;/span&gt;
augroup TexTags
autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TexTags
autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; tex &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b:latex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
augroup end
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b:latex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;f5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;ctags &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to generating the ctags, you also need to tell Vim where to find the generated tag files.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Ctags search&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=.&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;;$HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tags string says to search for the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tags&lt;/code&gt; in the current file’s directory and recursively search upward until the user’s home directory is reached.&lt;/p&gt;

&lt;h2 id=&quot;ctags-with-vim-and-git&quot;&gt;Ctags with Vim and Git&lt;/h2&gt;

&lt;p&gt;However, I do not manually generate the ctags file with &amp;lt;F5&amp;gt;.
I store all my source code in &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;, so instead of manually generating the ctags file, I use &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;githooks&lt;/a&gt; to automatically generate the ctags files whenever I checkout, commit, merge, or rewrite.
To setup githooks to be added automatically to newly cloned or created git repos, you make a git template with the correct files.
The git template will be copied into the new repositories &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder on creation.&lt;/p&gt;

&lt;p&gt;First, setup the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_template&lt;/code&gt; structure.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.git_template/
└── hooks
    ├── ctags
    ├── post-checkout
    ├── post-commit
    ├── post-merge
    └── post-rewrite

1 directory, 5 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ctags:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--show-toplevel&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rm -f &quot;$dir/.$$.tags&quot;'&lt;/span&gt; EXIT
ctags &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tag-relative&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--extra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+f &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tags&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--languages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-javascript&lt;/span&gt;,sql
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tags&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.tags&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-checkout:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-commit:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-merge:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/ctags &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;post-rewrite:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;rebase&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/hooks/post-merge &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also have to add the template to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[init]
    templatedir = ~/.git_template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now more about the ctags command.
To use the command, you first have to install ctags.
I use &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;exuberant-ctags&lt;/a&gt; which can be installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install exuberant-ctags&lt;/code&gt; on Ubuntu or Debian based Linux.
The ctags command I use is&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctags -R --tag-relative --extra=+f -f&quot;$dir/.$$.tags&quot; --languages=-javascript,sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt; recurses into directories.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tag-relative&lt;/code&gt; sets file paths relative to the tag file.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--extra=+f&lt;/code&gt; includes the entry for the base file name of every source file.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; specifies that the tag file should be saved at the root of the git repository as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tags&lt;/code&gt;.
Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--languages&lt;/code&gt; removes javascript and SQL from the languages which get tagged.&lt;/p&gt;

&lt;p&gt;As mentioned before, this template will only apply to new git repositories; therefore, I also created two &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish&lt;/a&gt; functions to reload git hooks based on the git template.
One file reloads hooks in a git repo without submodules, and the other one recursively updates the hooks of all submodules.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-reload-hooks.fish&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function git-reload-hooks --description 'Reload git hooks'
rm -f (git rev-parse --git-dir)/hooks/*
git init
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-reload-hooks-all.fish&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function git-reload-hooks-all --description 'Reload all git hooks'
    git submodule foreach --recursive 'rm -f $(git rev-parse --git-dir)/hooks/*;git init'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all of this seems like a lot to setup, I recommend storing all your linux dotfiles in a git repository with a script to symlink the files to the right location.
I plan to create a future post with more detail on how this is done.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;I followed &lt;a href=&quot;https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&quot;&gt;https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&lt;/a&gt; when I was setting up ctags for the first time.
I have since modified my setup to work better with git submodules and other edge cases.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Git" /><category term="Vim" /><category term="Ctags" /><summary type="html">Ctags with Vim are incredibly useful for quickly navigating around code. With them, Vim can jump between symbols to quickly go to the definition of symbols or find keywords within the document. Ctags + Vim end up working very similar to how Visual Studio Code or other IDEs “go to definition” and “find all symbols works.”</summary></entry><entry><title type="html">Dr. Dean featured in PC Gamer</title><link href="https://geekdude.github.io/tech/dean-pc-gamer/" rel="alternate" type="text/html" title="Dr. Dean featured in PC Gamer" /><published>2021-02-26T00:00:00-05:00</published><updated>2021-02-26T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/dean-pc-gamer</id><content type="html" xml:base="https://geekdude.github.io/tech/dean-pc-gamer/">&lt;p&gt;My PhD advisor, Mark Dean, was recentally featured in PC Gamer for his work on the first IBM PC. Read the article at &lt;a href=&quot;https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/&quot;&gt;https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="News" /><summary type="html">My PhD advisor, Mark Dean, was recentally featured in PC Gamer for his work on the first IBM PC. Read the article at https://www.pcgamer.com/dr-mark-dean-interview-ibm-engineer/.</summary></entry><entry><title type="html">Moving Website from web.eecs.utk.edu to Github.io</title><link href="https://geekdude.github.io/tech/moving-website/" rel="alternate" type="text/html" title="Moving Website from web.eecs.utk.edu to Github.io" /><published>2021-02-24T00:00:00-05:00</published><updated>2021-02-24T00:00:00-05:00</updated><id>https://geekdude.github.io/tech/moving-website</id><content type="html" xml:base="https://geekdude.github.io/tech/moving-website/">&lt;p&gt;After graduating last May, I decided to migrate &lt;a href=&quot;/tech/new-website/&quot;&gt;my website&lt;/a&gt; from hosting on the EECS servers at UTK to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
I always planned on migrating to GitHub pages post-graduation; that was one reason I chose to build my website using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.
GitHub pages can host any static website, but it is designed to build and work with Jekyll sites automatically.
I wanted to migrate my website properly with correct redirection and Search Engine Optimization (SEO).
Overall the process was relatively easy, but I did run into some issues, primarily with the customizations I have done to the website.
This post will cover the overall steps I took and also the issues and workarounds I encountered.&lt;/p&gt;

&lt;h2 id=&quot;moving-the-site-to-github&quot;&gt;Moving the site to GitHub&lt;/h2&gt;
&lt;p&gt;Previously I have been hosting my repository as a private repo in &lt;a href=&quot;https://bitbucket.org/&quot;&gt;bitbucket&lt;/a&gt;.
I decided to move the repository to a public &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; repo since I used GitHub pages for hosting.
At first, I tried just to move my repository over directly and use GitHub’s built-in building of Jekyll.
However, this auto-building feature only supports a &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll#plugins&quot;&gt;subset of Jekyll plugins&lt;/a&gt;.
The plugin I use for pagination, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;Jekyll Paginate V2&lt;/a&gt;, is not one of the supported plugins.
This limitation means that the built-in building would not work for my site without changing the plugins I use.
Therefore, I turned off the automatic Jekyll building by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file to the root of the repository.&lt;/p&gt;

&lt;p&gt;I then tried to build the site automatically with GitHub Actions, but I had trouble getting the site to build using a docker image with the Jekyll build action.
While looking into the build issues, I realized my website would not build with the newest versions of Jekyll and &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;.
By finding a copy of the Gemfile.lock file I used to build the website with last, I was able to roll back to the old versions and build my website correctly again.
Again, the issue was related to the custom template files I created to use Paginate V2 for my home pages and article pages.
The trouble with Jekyll and extension versions leads me to an important lessons learned:
&lt;strong&gt;Store the Gemfile.lock in version control so that you can diagnose issues caused by building with newer versions of the tools and extensions.&lt;/strong&gt;
I was lucky and could just pull the lock file from my backups which saved me extra debugging time.&lt;/p&gt;

&lt;p&gt;Since I like the way my website looks and I didn’t want to spend extra time porting my template to the newer version, I decided to keep building the website locally and uploading the static site for hosting.
Luckily GitHub Pages supports this flow.
The static website can be uploaded to the main branch or a branch called gh-pages.
Actually, the branch and path can be chosen under Settings -&amp;gt; Options -&amp;gt; GitHub Pages, so any location can be used for the source.
At first, I tested uploading the built website to the main branch, and the website was hosted as expected.
But I then decided to host the website’s source in the main branch and a gh-pages branch to host the built website.
To make the whole process simpler, I wanted to update my deploy script to build and deploy the website to a branch in the repository.
At first, I was hesitant to store the built files in the repo, but since the files are in an orphaned branch, they are separate from the main branch.
The orphan branch (as opposed to a folder in the main branch) will make cleaning the files up easier, if they get too large.&lt;/p&gt;

&lt;p&gt;Luckily updating the build script was easy since I found a &lt;a href=&quot;https://github.com/X1011/git-directory-deploy&quot;&gt;Git Directory Deploy&lt;/a&gt; script that I could leverage to copy the built site directory to a separate orphaned git branch.
Now &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/deploy.sh&quot;&gt;my deploy script&lt;/a&gt; just calls a &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/deploy_github.sh&quot;&gt;customized version of the git deploy script&lt;/a&gt; with the variables filled in for my site.
Previously it would use rsync to copy the build files to the EECS servers website folder.&lt;/p&gt;

&lt;p&gt;Since I decided to use the same local build then deploy setup, minimal changes were needed to the site itself.
I updated the site URL in &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io/blob/master/_config.yml&quot;&gt;_config.yml&lt;/a&gt; as well as updated the previously mentioned deploy scripts.
That was all that was required to migrate the site and start hosting on GitHub Pages. The source code for the site can be found at &lt;a href=&quot;https://github.com/Geekdude/Geekdude.github.io&quot;&gt;https://github.com/Geekdude/Geekdude.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-redirection&quot;&gt;Setting up redirection&lt;/h2&gt;
&lt;p&gt;The next step was to set up redirection from the old URL to the new URL.
After looking into redirection, I discovered that I wanted to use redirection with the permanent redirection status (301) which indicates that the resource has moved permanently.
From various posts, I learned that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file is used on linux servers to specify server-level redirects.
I had trouble finding the correct redirect commands until I read the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_alias.html#redirect&quot;&gt;Apache Documentation for Redirect&lt;/a&gt; and &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_alias.html#redirectmatch&quot;&gt;RedirectMatch&lt;/a&gt;.
The trouble I ran into was how to correctly map from a folder on a domain to a domain (i.e. /~ayoung48 to /).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file that ended up working properly is&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RedirectMatch 301 &quot;/~ayoung48/(.*)&quot; &quot;https://Geekdude.github.io/$1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This redirect match command would correctly redirect pages from the old site to the new site.
I will leave up this redirection until I lose access to the UTK servers.&lt;/p&gt;

&lt;h2 id=&quot;search-engine-optimization&quot;&gt;Search Engine Optimization&lt;/h2&gt;
&lt;p&gt;Since the redirection was setup in the previous section, updating the search optimization is easier.
I added the new site to &lt;a href=&quot;https://search.google.com/search-console/about&quot;&gt;Google Search Console&lt;/a&gt; and &lt;a href=&quot;https://www.bing.com/webmasters&quot;&gt;Microsoft Webmaster Tools&lt;/a&gt;.
There did not seem to be an explicit place to let them know about the move&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but with redirection and having both sites listed under my account, I hope their web crawler will figure it out.
I do not even need to redo the website verification method since it was already done for the old address and the verification files are still in place.&lt;/p&gt;

&lt;h2 id=&quot;moving-comments&quot;&gt;Moving Comments&lt;/h2&gt;
&lt;p&gt;Moving comments with Discus was easy as well.
Since I have 301 redirection set up, I could just go into Admin -&amp;gt; Moderate Comments -&amp;gt; Tools -&amp;gt; Migration Tools and use the Redirect Crawler.
Then Discus ported the two comments I had on my old site to the new site.
I also discovered that I am not getting email notifications when people comment.
I will need to look into why.
The settings are correctly set.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There was one for google but it required Domain level property types, not URL Prefix like I am using. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Tech" /><category term="Website" /><summary type="html">After graduating last May, I decided to migrate my website from hosting on the EECS servers at UTK to GitHub Pages. I always planned on migrating to GitHub pages post-graduation; that was one reason I chose to build my website using Jekyll. GitHub pages can host any static website, but it is designed to build and work with Jekyll sites automatically. I wanted to migrate my website properly with correct redirection and Search Engine Optimization (SEO). Overall the process was relatively easy, but I did run into some issues, primarily with the customizations I have done to the website. This post will cover the overall steps I took and also the issues and workarounds I encountered.</summary></entry><entry><title type="html">PhD Dissertation and Artifacts Available</title><link href="https://geekdude.github.io/research/dissertation/" rel="alternate" type="text/html" title="PhD Dissertation and Artifacts Available" /><published>2021-01-30T00:00:00-05:00</published><updated>2021-01-30T00:00:00-05:00</updated><id>https://geekdude.github.io/research/dissertation</id><content type="html" xml:base="https://geekdude.github.io/research/dissertation/">&lt;p&gt;My dissertation titled &lt;em&gt;SNACC: The Scaled-up Neuromorphic Array Communications Controller&lt;/em&gt; is now available at &lt;a href=&quot;https://trace.tennessee.edu/utk_graddiss/5843/&quot;&gt;https://trace.tennessee.edu/utk_graddiss/5843/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have also made available two general-purpose IP blocks written in VHDL that I created as part of my dissertation work. They are a custom Aurora acknowledgment automatic repeat request design available at &lt;a href=&quot;https://github.com/Geekdude/aurora-ack&quot;&gt;https://github.com/Geekdude/aurora-ack&lt;/a&gt; and a AXI4-Stream clock converter design available at &lt;a href=&quot;https://github.com/Geekdude/axi4-stream-clock-converter&quot;&gt;https://github.com/Geekdude/axi4-stream-clock-converter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recommended-citation&quot;&gt;Recommended Citation&lt;/h2&gt;

&lt;p&gt;Plain Text:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Young, Aaron Reed, &quot;SNACC: The Scaled-up Neuromorphic Array Communications Controller. &quot; PhD diss., University of Tennessee, 2020.
https://trace.tennessee.edu/utk_graddiss/5843
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bibtex:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@PhdThesis{y:20:snacc,
    title       = {SNACC: The Scaled-up Neuromorphic Array Communications Controller},
    author      = {Aaron Reed Young},
    institution = {University of Tennessee},
    month       = {May},
    year        = {2020},
    url         = {https://trace.tennessee.edu/utk_graddiss/5843/}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Aaron Young</name><email>youngar@ornl.gov</email></author><category term="Research" /><category term="Neuromorphic Computing" /><summary type="html">My dissertation titled SNACC: The Scaled-up Neuromorphic Array Communications Controller is now available at https://trace.tennessee.edu/utk_graddiss/5843/.</summary></entry></feed>